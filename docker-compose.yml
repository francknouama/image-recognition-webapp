version: '3.8'

services:
  # Web application
  webapp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: image-recognition-webapp
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=development
      - PORT=8080
      - LOG_LEVEL=debug
      - MODEL_PATH=/app/models
      - UPLOAD_DIR=/app/uploads
      - TEMP_DIR=/app/temp
    volumes:
      - ./models:/app/models:ro
      - webapp-uploads:/app/uploads
      - webapp-temp:/app/temp
      - webapp-logs:/app/logs
    networks:
      - webapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service with hot reload
  webapp-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: image-recognition-webapp-dev
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=development
      - PORT=8080
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - webapp-uploads:/app/uploads
      - webapp-temp:/app/temp
      - webapp-logs:/app/logs
    networks:
      - webapp-network
    profiles:
      - dev
    command: ["air", "-c", ".air.toml"]

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: image-recognition-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployments/nginx/ssl:/etc/nginx/ssl:ro
      - webapp-static:/var/www/static:ro
    depends_on:
      - webapp
    networks:
      - webapp-network
    profiles:
      - nginx
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: image-recognition-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - webapp-network
    profiles:
      - cache
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: image-recognition-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - webapp-network
    profiles:
      - monitoring
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: image-recognition-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployments/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployments/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - webapp-network
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  webapp-uploads:
    driver: local
  webapp-temp:
    driver: local
  webapp-logs:
    driver: local
  webapp-static:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  webapp-network:
    driver: bridge