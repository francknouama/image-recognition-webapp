name: Deploy to DigitalOcean App Platform

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: 'false'
        type: boolean

env:
  DO_REGION: nyc3

jobs:
  # Deploy to DigitalOcean App Platform
  deploy-app-platform:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Check if app exists
      id: check-app
      run: |
        if doctl apps list --format ID,Name --no-header | grep -q "image-recognition-webapp"; then
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep "image-recognition-webapp" | awk '{print $1}')
          echo "app-exists=true" >> $GITHUB_OUTPUT
          echo "app-id=$APP_ID" >> $GITHUB_OUTPUT
          echo "Found existing app: $APP_ID"
        else
          echo "app-exists=false" >> $GITHUB_OUTPUT
          echo "No existing app found"
        fi
    
    - name: Create App Platform app (first time)
      if: steps.check-app.outputs.app-exists == 'false'
      run: |
        echo "Creating new App Platform application..."
        
        # Create the app spec with secrets
        cat > app-spec.yaml << EOF
        name: image-recognition-webapp
        region: nyc3
        services:
        - name: webapp
          source_dir: /
          github:
            repo: ${{ github.repository }}
            branch: main
            deploy_on_push: true
          run_command: ./main
          environment_slug: go
          instance_count: 1
          instance_size_slug: basic-xxs
          http_port: 8080
          health_check:
            http_path: /health
            initial_delay_seconds: 30
            period_seconds: 10
            timeout_seconds: 5
            success_threshold: 1
            failure_threshold: 3
          routes:
          - path: /
          envs:
          - key: ENVIRONMENT
            value: production
          - key: PORT
            value: "8080"
          - key: GO_ENV
            value: production
          - key: LOG_LEVEL
            value: info
          - key: UPLOAD_MAX_SIZE
            value: "10485760"
          - key: UPLOAD_ALLOWED_TYPES
            value: "image/jpeg,image/png,image/webp"
          - key: UPLOAD_TEMP_DIR
            value: "/tmp/uploads"
          - key: MODEL_CACHE_PATH
            value: "/tmp/models"
          - key: SPACES_ENDPOINT
            value: ${{ secrets.SPACES_ENDPOINT }}
            scope: RUN_TIME
            type: SECRET
          - key: SPACES_BUCKET
            value: ${{ secrets.SPACES_BUCKET }}
            scope: RUN_TIME
            type: SECRET
          - key: SPACES_ACCESS_KEY
            value: ${{ secrets.SPACES_ACCESS_KEY }}
            scope: RUN_TIME
            type: SECRET
          - key: SPACES_SECRET_KEY
            value: ${{ secrets.SPACES_SECRET_KEY }}
            scope: RUN_TIME
            type: SECRET
          - key: DATABASE_URL
            value: \${webapp-db.DATABASE_URL}
            scope: RUN_TIME
          - key: REDIS_URL
            value: \${webapp-redis.DATABASE_URL}
            scope: RUN_TIME
        
        databases:
        - engine: PG
          name: webapp-db
          num_nodes: 1
          size: db-s-dev-database
          version: "15"
        
        - engine: REDIS
          name: webapp-redis
          num_nodes: 1
          size: db-s-dev-database
          version: "7"
        
        alerts:
        - rule: CPU_UTILIZATION
          disabled: false
        - rule: MEM_UTILIZATION
          disabled: false
        - rule: RESTART_COUNT
          disabled: false
        EOF
        
        # Create the app
        APP_ID=$(doctl apps create app-spec.yaml --format ID --no-header)
        echo "Created app with ID: $APP_ID"
        echo "app-id=$APP_ID" >> $GITHUB_OUTPUT
    
    - name: Update existing app
      if: steps.check-app.outputs.app-exists == 'true'
      run: |
        APP_ID="${{ steps.check-app.outputs.app-id }}"
        echo "Updating existing app: $APP_ID"
        
        # Get current spec and update it
        doctl apps spec get $APP_ID > current-spec.yaml
        
        # Update the spec with current commit
        # For simplicity, we'll trigger a redeploy by updating an env var
        doctl apps update $APP_ID --spec current-spec.yaml
    
    - name: Wait for deployment
      run: |
        if [ "${{ steps.check-app.outputs.app-exists }}" = "false" ]; then
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep "image-recognition-webapp" | awk '{print $1}')
        else
          APP_ID="${{ steps.check-app.outputs.app-id }}"
        fi
        
        echo "Waiting for deployment to complete..."
        echo "App ID: $APP_ID"
        
        # Wait for deployment (timeout after 10 minutes)
        timeout 600 bash -c "
          while true; do
            STATUS=\$(doctl apps get \$APP_ID --format Phase --no-header)
            echo \"Current status: \$STATUS\"
            
            if [ \"\$STATUS\" = \"ACTIVE\" ]; then
              echo \"‚úÖ Deployment completed successfully!\"
              break
            elif [ \"\$STATUS\" = \"ERROR\" ] || [ \"\$STATUS\" = \"FAILED\" ]; then
              echo \"‚ùå Deployment failed with status: \$STATUS\"
              exit 1
            fi
            
            sleep 30
          done
        "
        
        # Get the app URL
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        echo "üöÄ Application deployed at: $APP_URL"
        echo "app-url=$APP_URL" >> $GITHUB_OUTPUT
    
    - name: Run health checks
      run: |
        if [ "${{ steps.check-app.outputs.app-exists }}" = "false" ]; then
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep "image-recognition-webapp" | awk '{print $1}')
        else
          APP_ID="${{ steps.check-app.outputs.app-id }}"
        fi
        
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        
        echo "Running health checks against: $APP_URL"
        
        # Wait for app to be ready
        sleep 60
        
        # Basic health check
        echo "Testing health endpoint..."
        curl -f "$APP_URL/health" || echo "Health check failed (may be normal during first deployment)"
        
        # Test API endpoints
        echo "Testing API health..."
        curl -f "$APP_URL/api/health" || echo "API health check failed"
        
        echo "Testing models endpoint..."
        curl -f "$APP_URL/api/models" || echo "Models endpoint check failed"
        
        echo "‚úÖ Basic health checks completed"
    
    - name: Create deployment summary
      run: |
        if [ "${{ steps.check-app.outputs.app-exists }}" = "false" ]; then
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep "image-recognition-webapp" | awk '{print $1}')
        else
          APP_ID="${{ steps.check-app.outputs.app-id }}"
        fi
        
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **App ID**: \`$APP_ID\`" >> $GITHUB_STEP_SUMMARY
        echo "- **App URL**: [$APP_URL]($APP_URL)" >> $GITHUB_STEP_SUMMARY
        echo "- **Git SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Health Check]($APP_URL/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [API Health]($APP_URL/api/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [Upload Page]($APP_URL/upload)" >> $GITHUB_STEP_SUMMARY
        echo "- [Models API]($APP_URL/api/models)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### App Platform Console" >> $GITHUB_STEP_SUMMARY
        echo "View logs and metrics in the [DigitalOcean Console](https://cloud.digitalocean.com/apps/$APP_ID)"

  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: deploy-app-platform
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-app-platform.result == 'success'
      run: |
        echo "‚úÖ App Platform deployment successful!"
        
        # Optional Slack notification
        if [[ -n "${{ secrets.SLACK_WEBHOOK }}" ]]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üöÄ Image Recognition WebApp deployed to App Platform successfully!\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}"}' \
            ${{ secrets.SLACK_WEBHOOK }}
        fi
    
    - name: Notify failure
      if: needs.deploy-app-platform.result == 'failure'
      run: |
        echo "‚ùå App Platform deployment failed!"
        
        # Optional Slack notification
        if [[ -n "${{ secrets.SLACK_WEBHOOK }}" ]]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå Image Recognition WebApp deployment to App Platform failed!\nCommit: ${{ github.sha }}\nCheck GitHub Actions for details."}' \
            ${{ secrets.SLACK_WEBHOOK }}
        fi