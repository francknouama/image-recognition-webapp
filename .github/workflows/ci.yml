name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_app_platform:
        description: 'Deploy to App Platform'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write

env:
  GO_VERSION: '1.24'
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: image-recognition-webapp

jobs:
  # Code quality and testing
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
    
    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m
    
    - name: Run tests
      run: |
        go test -v -race -covermode=atomic -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application
      run: |
        make build
    
    - name: Run security scan
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec ./...

  # Docker build and security scan
  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: ${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:test
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Test Docker container
      run: |
        docker run --rm -d --name test-container -p 8080:8080 ${{ env.IMAGE_NAME }}:test
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-container

  # Deploy to DigitalOcean App Platform
  deploy-app-platform:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.deploy_to_app_platform)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Check if app exists
      id: check-app
      run: |
        if doctl apps list --format ID,Name --no-header | grep -q "image-recognition-webapp"; then
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep "image-recognition-webapp" | awk '{print $1}')
          echo "app-exists=true" >> $GITHUB_OUTPUT
          echo "app-id=$APP_ID" >> $GITHUB_OUTPUT
          echo "Found existing app: $APP_ID"
        else
          echo "app-exists=false" >> $GITHUB_OUTPUT
          echo "No existing app found"
        fi
    
    - name: Create App Platform app (first time)
      if: steps.check-app.outputs.app-exists == 'false'
      run: |
        echo "Creating new App Platform application..."
        
        # Create the app spec with secrets
        cat > app-spec.yaml << EOF
        name: image-recognition-webapp
        region: nyc3
        services:
        - name: webapp
          source_dir: /
          github:
            repo: ${{ github.repository }}
            branch: main
            deploy_on_push: true
          run_command: ./main
          environment_slug: go
          instance_count: 1
          instance_size_slug: basic-xxs
          http_port: 8080
          health_check:
            http_path: /health
            initial_delay_seconds: 60
            period_seconds: 10
            timeout_seconds: 5
            success_threshold: 1
            failure_threshold: 3
          routes:
          - path: /
          envs:
          - key: ENVIRONMENT
            value: production
          - key: PORT
            value: "8080"
          - key: GO_ENV
            value: production
          - key: LOG_LEVEL
            value: info
          - key: UPLOAD_MAX_SIZE
            value: "10485760"
          - key: UPLOAD_ALLOWED_TYPES
            value: "image/jpeg,image/png,image/webp"
          - key: UPLOAD_TEMP_DIR
            value: "/tmp/uploads"
          - key: MODEL_CACHE_PATH
            value: "/tmp/models"
          - key: SPACES_ENDPOINT
            value: ${{ secrets.SPACES_ENDPOINT }}
            scope: RUN_TIME
            type: SECRET
          - key: SPACES_BUCKET
            value: ${{ secrets.SPACES_BUCKET }}
            scope: RUN_TIME
            type: SECRET
          - key: SPACES_ACCESS_KEY
            value: ${{ secrets.SPACES_ACCESS_KEY }}
            scope: RUN_TIME
            type: SECRET
          - key: SPACES_SECRET_KEY
            value: ${{ secrets.SPACES_SECRET_KEY }}
            scope: RUN_TIME
            type: SECRET
          - key: DATABASE_URL
            value: \${webapp-db.DATABASE_URL}
            scope: RUN_TIME
          - key: REDIS_URL
            value: \${webapp-redis.DATABASE_URL}
            scope: RUN_TIME
        
        databases:
        - engine: PG
          name: webapp-db
          num_nodes: 1
          size: db-s-dev-database
          version: "15"
        
        - engine: REDIS
          name: webapp-redis
          num_nodes: 1
          size: db-s-dev-database
          version: "7"
        
        alerts:
        - rule: CPU_UTILIZATION
          disabled: false
        - rule: MEM_UTILIZATION
          disabled: false
        - rule: RESTART_COUNT
          disabled: false
        EOF
        
        # Create the app
        APP_ID=$(doctl apps create app-spec.yaml --format ID --no-header)
        echo "Created app with ID: $APP_ID"
        echo "app-id=$APP_ID" >> $GITHUB_OUTPUT
    
    - name: Trigger deployment for existing app
      if: steps.check-app.outputs.app-exists == 'true'
      run: |
        APP_ID="${{ steps.check-app.outputs.app-id }}"
        echo "Triggering deployment for existing app: $APP_ID"
        
        # Create a new deployment
        doctl apps create-deployment $APP_ID
    
    - name: Wait for deployment
      run: |
        if [ "${{ steps.check-app.outputs.app-exists }}" = "false" ]; then
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep "image-recognition-webapp" | awk '{print $1}')
        else
          APP_ID="${{ steps.check-app.outputs.app-id }}"
        fi
        
        echo "Waiting for deployment to complete..."
        echo "App ID: $APP_ID"
        
        # Wait for deployment (timeout after 10 minutes)
        timeout 600 bash -c "
          while true; do
            STATUS=\$(doctl apps get \$APP_ID --format Phase --no-header)
            echo \"Current status: \$STATUS\"
            
            if [ \"\$STATUS\" = \"ACTIVE\" ]; then
              echo \"✅ Deployment completed successfully!\"
              break
            elif [ \"\$STATUS\" = \"ERROR\" ] || [ \"\$STATUS\" = \"FAILED\" ]; then
              echo \"❌ Deployment failed with status: \$STATUS\"
              exit 1
            fi
            
            sleep 30
          done
        "
        
        # Get the app URL
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        echo "🚀 Application deployed at: $APP_URL"
    
    - name: Run health checks
      run: |
        if [ "${{ steps.check-app.outputs.app-exists }}" = "false" ]; then
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep "image-recognition-webapp" | awk '{print $1}')
        else
          APP_ID="${{ steps.check-app.outputs.app-id }}"
        fi
        
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        
        echo "Running health checks against: $APP_URL"
        
        # Wait for app to be ready
        sleep 60
        
        # Basic health check
        echo "Testing health endpoint..."
        curl -f "$APP_URL/health" || echo "Health check failed (may be normal during first deployment)"
        
        # Test API endpoints
        echo "Testing API health..."
        curl -f "$APP_URL/api/health" || echo "API health check failed"
        
        echo "Testing models endpoint..."
        curl -f "$APP_URL/api/models" || echo "Models endpoint check failed"
        
        echo "✅ Basic health checks completed"
    
    - name: Create deployment summary
      run: |
        if [ "${{ steps.check-app.outputs.app-exists }}" = "false" ]; then
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep "image-recognition-webapp" | awk '{print $1}')
        else
          APP_ID="${{ steps.check-app.outputs.app-id }}"
        fi
        
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        
        echo "## 🚀 App Platform Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **App ID**: \`$APP_ID\`" >> $GITHUB_STEP_SUMMARY
        echo "- **App URL**: [$APP_URL]($APP_URL)" >> $GITHUB_STEP_SUMMARY
        echo "- **Git SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Health Check]($APP_URL/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [API Health]($APP_URL/api/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [Upload Page]($APP_URL/upload)" >> $GITHUB_STEP_SUMMARY
        echo "- [Models API]($APP_URL/api/models)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### App Platform Console" >> $GITHUB_STEP_SUMMARY
        echo "View logs and metrics in the [DigitalOcean Console](https://cloud.digitalocean.com/apps/$APP_ID)"

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./... > benchmark.txt
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.txt

  # Integration tests
  integration:
    runs-on: ubuntu-latest
    needs: docker
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        load: true
        tags: ${{ env.IMAGE_NAME }}:integration
        cache-from: type=gha
    
    - name: Run integration tests
      run: |
        # Start the application
        docker run --rm -d --name integration-test \
          --network host \
          -e ENVIRONMENT=test \
          -e PORT=8080 \
          ${{ env.IMAGE_NAME }}:integration
        
        # Wait for application to start
        sleep 15
        
        # Run integration tests
        curl -f http://localhost:8080/health
        curl -f http://localhost:8080/api/health
        curl -f http://localhost:8080/api/models
        
        # Test file upload (with a small test image)
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==" | base64 -d > test.png
        curl -X POST -F "image=@test.png" http://localhost:8080/upload
        
        # Cleanup
        docker stop integration-test
        rm test.png

  # Create release (on version tags)
  release:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build binaries
      run: |
        make build
        
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -o bin/image-recognition-webapp-linux-amd64 ./cmd/server
        GOOS=linux GOARCH=arm64 go build -o bin/image-recognition-webapp-linux-arm64 ./cmd/server
        GOOS=darwin GOARCH=amd64 go build -o bin/image-recognition-webapp-darwin-amd64 ./cmd/server
        GOOS=darwin GOARCH=arm64 go build -o bin/image-recognition-webapp-darwin-arm64 ./cmd/server
        GOOS=windows GOARCH=amd64 go build -o bin/image-recognition-webapp-windows-amd64.exe ./cmd/server
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes
          
          - Automated release from CI/CD pipeline
          - Docker image available at ${{ env.REGISTRY }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.ref }}
          
          ## Download
          
          Choose the appropriate binary for your platform:
          - Linux (x64): `image-recognition-webapp-linux-amd64`
          - Linux (ARM64): `image-recognition-webapp-linux-arm64`
          - macOS (Intel): `image-recognition-webapp-darwin-amd64`
          - macOS (Apple Silicon): `image-recognition-webapp-darwin-arm64`
          - Windows (x64): `image-recognition-webapp-windows-amd64.exe`
          
          ## Docker Usage
          
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.ref }}
          docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.ref }}
          ```
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      run: |
        # Upload binaries to release
        for file in bin/*; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            # Add upload commands here
          fi
        done