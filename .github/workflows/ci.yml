name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

env:
  GO_VERSION: '1.24'
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: image-recognition-webapp

jobs:
  # Code quality and testing
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
    
    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m
    
    - name: Run tests
      run: |
        go test -v -race -covermode=atomic -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application
      run: |
        make build
    
    - name: Run security scan
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec ./...

  # Docker build and security scan
  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: ${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:test
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Test Docker container
      run: |
        docker run --rm -d --name test-container -p 8080:8080 ${{ env.IMAGE_NAME }}:test
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-container

  # Build and push to registry (on main branch)
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Log in to DigitalOcean Container Registry
      run: doctl registry login --expiry-seconds 1200
    
    - name: Check registry info
      run: |
        echo "Registry endpoint: ${{ env.REGISTRY }}"
        echo "Registry name: ${{ secrets.REGISTRY_NAME }}"
        echo "Full image path: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}"
        doctl registry get || echo "Failed to get registry info"
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to staging
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./... > benchmark.txt
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.txt

  # Integration tests
  integration:
    runs-on: ubuntu-latest
    needs: docker
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        load: true
        tags: ${{ env.IMAGE_NAME }}:integration
        cache-from: type=gha
    
    - name: Run integration tests
      run: |
        # Start the application
        docker run --rm -d --name integration-test \
          --network host \
          -e ENVIRONMENT=test \
          -e PORT=8080 \
          ${{ env.IMAGE_NAME }}:integration
        
        # Wait for application to start
        sleep 15
        
        # Run integration tests
        curl -f http://localhost:8080/health
        curl -f http://localhost:8080/api/health
        curl -f http://localhost:8080/api/models
        
        # Test file upload (with a small test image)
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==" | base64 -d > test.png
        curl -X POST -F "image=@test.png" http://localhost:8080/upload
        
        # Cleanup
        docker stop integration-test
        rm test.png

  # Create release (on version tags)
  release:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build binaries
      run: |
        make build
        
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -o bin/image-recognition-webapp-linux-amd64 ./cmd/server
        GOOS=linux GOARCH=arm64 go build -o bin/image-recognition-webapp-linux-arm64 ./cmd/server
        GOOS=darwin GOARCH=amd64 go build -o bin/image-recognition-webapp-darwin-amd64 ./cmd/server
        GOOS=darwin GOARCH=arm64 go build -o bin/image-recognition-webapp-darwin-arm64 ./cmd/server
        GOOS=windows GOARCH=amd64 go build -o bin/image-recognition-webapp-windows-amd64.exe ./cmd/server
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes
          
          - Automated release from CI/CD pipeline
          - Docker image available at ${{ env.REGISTRY }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.ref }}
          
          ## Download
          
          Choose the appropriate binary for your platform:
          - Linux (x64): `image-recognition-webapp-linux-amd64`
          - Linux (ARM64): `image-recognition-webapp-linux-arm64`
          - macOS (Intel): `image-recognition-webapp-darwin-amd64`
          - macOS (Apple Silicon): `image-recognition-webapp-darwin-arm64`
          - Windows (x64): `image-recognition-webapp-windows-amd64.exe`
          
          ## Docker Usage
          
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.ref }}
          docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.ref }}
          ```
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      run: |
        # Upload binaries to release
        for file in bin/*; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            # Add upload commands here
          fi
        done